#  Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Set fact for volume names
  ansible.builtin.set_fact:
    pv_vol_names: ""
    powervault_volumes: "{{ powervault_volumes.split(',') | map('trim') }}"

- name: Get auth string
  ansible.builtin.shell: echo -n {{ powervault_username }}_{{ powervault_password }}  | sha256sum
  register: vol_auth_string
  changed_when: false
  no_log: true
  ignore_errors: true

- name: Get session key
  ansible.builtin.uri:
    url: https://{{ inventory_hostname }}/api/login/{{ vol_auth_string.stdout | replace(' -', '') }}
    method: GET
    headers:
      datatype: json
    validate_certs: false
    follow_redirects: all
  register: vol_session_key

- name: Check the present volumes
  ansible.builtin.uri:
    url: https://{{ inventory_hostname }}/api/show/volumes
    method: GET
    body_format: json
    validate_certs: false
    use_proxy: false
    timeout: "{{ task_timeout }}"
    headers:
      sessionKey: "{{ vol_session_key.json.status[0].response }}"
      datatype: json
    return_content: true
  register: vol_detail

- name: Store already created volumes
  ansible.builtin.set_fact:
    pv_vol_names: "{{ pv_vol_names | default([]) }} + ['{{ item['volume-name'] }}']"
  loop: "{{  (vol_detail.content | from_json)['volumes'] }}"

- name: Add disk group in virtual pool
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}/api/add/disk-group/type/{{ powervault_pool_type }}/disks/\
          {{ powervault_disk_range }}/level/{{ powervault_raid_levels }}/pool/{{ powervault_pool }}/{{ powervault_disk_group_name }}"
    method: GET
    body_format: json
    validate_certs: false
    use_proxy: false
    timeout: "{{ task_timeout }}"
    headers:
      sessionKey: "{{ vol_session_key.json.status[0].response }}"
      datatype: json
    return_content: true
  register: pv_disk1
  when: powervault_pool_type | lower == "virtual"

- name: Add disk group in linear pool
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}/api/add/disk-group/type/{{ powervault_pool_type }}/disks/\
          {{ powervault_disk_range }}/level/{{ powervault_raid_levels }}/{{ powervault_disk_group_name }}"
    method: GET
    body_format: json
    validate_certs: false
    use_proxy: false
    timeout: "{{ task_timeout }}"
    headers:
      sessionKey: "{{ vol_session_key.json.status[0].response }}"
      datatype: json
    return_content: true
  register: pv_disk2
  when: powervault_pool_type | lower == "linear"

- name: Assert if disk group created or not (virtual pool)
  ansible.builtin.fail:
    msg: "{{ (pv_disk1.content | from_json).status[0].response }}"
  when:
    - powervault_pool_type | lower == "virtual"
    - (pv_disk1.content | from_json).status[0]['response-type'] == "Error"

- name: Assert if disk group created or not (linear pool)
  ansible.builtin.fail:
    msg: "{{ (pv_disk2.content | from_json).status[0].response }}"
  when:
    - powervault_pool_type | lower == "linear"
    - (pv_disk2.content | from_json).status[0]['response-type'] == "Error"


- name: Create volumes when pool type is virtual
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}/api/create/volume/size/{{ powervault_volume_size }}/pool/{{ powervault_pool }}/{{ item.0 }}"
    method: GET
    body_format: json
    validate_certs: false
    use_proxy: false
    timeout: "{{ task_timeout }}"
    headers:
      sessionKey: "{{ vol_session_key.json.status[0].response }}"
      datatype: json
    return_content: true
  register: pv_vol
  with_together:
    - "{{ powervault_volumes }}"
    - "{{ pv_vol_names }}"
  when:
    - powervault_pool_type | lower == "virtual"
    - item.0 != item.1
  failed_when: false

- name: Create volumes when pool type is linear
  ansible.builtin.uri:
    url: "https://{{ inventory_hostname }}/api/create/volume/size/{{ powervault_volume_size }}/pool/{{ powervault_disk_group_name }}/{{ item.0 }}"
    method: GET
    body_format: json
    validate_certs: false
    use_proxy: false
    timeout: "{{ task_timeout }}"
    headers:
      sessionKey: "{{ vol_session_key.json.status[0].response }}"
      datatype: json
    return_content: true
  register: pv_vol
  with_together:
    - "{{ powervault_volumes }}"
    - "{{ pv_vol_names }}"
  when:
    - powervault_pool_type | lower == "linear"
    - item.0 != item.1
  failed_when: false
