# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Verify all paramaters are provided
  ansible.builtin.assert:
    that:
      - ib_switch_type is defined
      - ib_username is defined
      - ib_password is defined
      - ib_switch_type | lower == 'edr' or ib_switch_type | lower == 'hdr' or ib_switch_type | lower == 'ndr'
      - ib_username | length >= min_username_length
      - ib_username | length < max_length
      - '"-" not in ib_username '
      - '"\\" not in ib_username '
      - '"\"" not in ib_username '
      - " \"'\" not in ib_username "
      - ib_password | length > min_username_length | int - 1
      - ib_password | length < max_length | int + 1
      - '"-" not in ib_password '
      - '"\\" not in ib_password '
      - '"\"" not in ib_password '
      - " \"'\" not in ib_password "
    success_msg: "{{ success_valid_msg }}"
    fail_msg: "{{ fail_valid_msg }}"

- name: Check if infiniband_hdr_input.yml exists
  ansible.builtin.stat:
    path: "{{ hdr_config_file }}"
  register: hdr_stat

- name: Fail if infiniband_hdr_input.yml file doesn't exist
  ansible.builtin.fail:
    msg: "{{ fail_msg_hdr_config_file }}"
  when: not hdr_stat.stat.exists

- name: Check if infiniband_edr_input.yml exists
  ansible.builtin.stat:
    path: "{{ edr_config_file }}"
  register: edr_stat

- name: Fail if infiniband_edr_input.yml file doesn't exist
  ansible.builtin.fail:
    msg: "{{ fail_msg_edr_config_file }}"
  when: not edr_stat.stat.exists

- name: Check if infiniband_ndr_input.yml exists
  ansible.builtin.stat:
    path: "{{ ndr_config_file }}"
  register: ndr_stat

- name: Fail if infiniband_ndr_input.yml file doesn't exist
  ansible.builtin.fail:
    msg: "{{ fail_msg_ndr_config_file }}"
  when: not ndr_stat.stat.exists

- name: Include infiniband_hdr_input.yml file
  ansible.builtin.include_vars: "{{ hdr_config_file }}"
  when: ib_switch_type | lower == 'hdr'

- name: Include infiniband_edr_input.yml file
  ansible.builtin.include_vars: "{{ edr_config_file }}"
  when: ib_switch_type | lower == 'edr'

- name: Include infiniband_ndr_input.yml file
  ansible.builtin.include_vars: "{{ ndr_config_file }}"
  when: ib_switch_type | lower == 'ndr'

- name: Validate save_changes_to_startup variable
  ansible.builtin.assert:
    that: "save_changes_to_startup == true or save_changes_to_startup == false"
    success_msg: "{{ success_msg_save_config }}"
    fail_msg: "{{ fail_msg_save_config }}"

- name: Validate enable_split_port
  ansible.builtin.assert:
    that: "enable_split_port == true or enable_split_port == false"
    success_msg: "{{ enable_split_port_success_msg }}"
    fail_msg: "{{ enable_split_port_fail_msg }}"

- name: Validate ib_username declaration
  ansible.builtin.fail:
    msg: "{{ ib_username_dec_msg }}"
  when: ib_username is not defined

- name: Validate ib_password declaration
  ansible.builtin.fail:
    msg: "{{ ib_password_dec_msg }}"
  when: ib_password is not defined

- name: Set facts to validate snmp support
  ansible.builtin.set_fact:
    snmp_enabled: false

- name: Verify snmp_trap_destination IP address
  ansible.builtin.set_fact:
    snmp_enabled: true
  when: snmp_trap_destination | length > 1

- name: Install netaddr
  ansible.builtin.pip:
    name: netaddr
    state: present

- name: Install common packages
  ansible.builtin.package:
    name: "{{ common_pkg }}"
    state: present

- name: Validate snmp trap destination address
  ansible.builtin.assert:
    that:
      - snmp_enabled
      - snmp_trap_destination | length > 7
      - snmp_trap_destination | ansible.utils.ipv4
    success_msg: "{{ success_snmp_trap_dest }}"
    fail_msg: "{{ fail_snmp_trap_dest }}"
  when: snmp_enabled

- name: Save login password of ib
  ansible.builtin.set_fact:
    ib_login_password: "{{ ib_password }}"
  no_log: true
