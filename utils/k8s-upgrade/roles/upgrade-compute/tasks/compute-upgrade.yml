---
- name: "Upgrade Compute Nodes"
  when: inventory_hostname in groups["compute"]
  block:
    - name: "Get the installed packages facts"
      ansible.builtin.package_facts:
        manager: "auto"

    - name: "Print kubernetes packages version"
      ansible.builtin.debug:
        msg:
          - "{{ ansible_facts.packages.kubelet[0].version }}"
          - "{{ ansible_facts.packages.kubeadm[0].version }}"
          - "{{ ansible_facts.packages.kubectl[0].version }}"

    - name: "Remove version lock from kubernetes packages"
      community.general.yum_versionlock:
        state: absent
        name:
          - "{{ item }}"
      with_items: "{{ versionlock_k8s_packages }}"

    - name: "Drain compute nodes -> {{ item.1 }}"
      ansible.builtin.shell: |
        kubectl drain {{ item.1 }} --ignore-daemonsets --delete-local-data
      delegate_to: "{{ item.0 }}"
      loop: "{{ groups['manager'] | zip(groups['compute']) }}"
      register: drain_node_register
      changed_when: drain_node_register.rc != 0

    - name: "Verify the upgrade node"
      ansible.builtin.shell: |
        kubeadm upgrade node --ignore-preflight-errors=all
      register: upgrade_plan_register
      changed_when: upgrade_plan_register.rc != 0
      failed_when: "'FAILED' in upgrade_plan_register.stderr"

    - name: "Upgrade Compute Node Packages with version {{ item }}"
      ansible.builtin.dnf:
        name: "{{ item }}"
        disable_excludes: kubernetes
        update_cache: true
      with_items: "{{ upgrade_k8s_packages }}"

    - name: "Reload Daemon and kubelet"
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
        daemon_reload: true

    - name: "Uncordon compute Node"
      ansible.builtin.command: kubectl uncordon {{ item.1 }}
      delegate_to: "{{ item.0 }}"
      loop: "{{ groups['manager'] | zip(groups['compute']) }}"
      register: uncordon_register
      changed_when: uncordon_register != 0

    - name: "Print updated kubernetes packages version"
      ansible.builtin.debug:
        msg:
          - "{{ ansible_facts.packages.kubelet[0].version }}"
          - "{{ ansible_facts.packages.kubeadm[0].version }}"
          - "{{ ansible_facts.packages.kubectl[0].version }}"

    - name: "Add version lock on kubernetes packages from being updated"
      community.general.yum_versionlock:
        state: present
        name:
          - "{{ item }}"
      with_items: "{{ versionlock_k8s_packages }}"

    - name: "Clean metadata and update yum modules"
      ansible.builtin.shell: yum clean metadata && yum clean all && yum makecache
      changed_when: true

    - name: "Suceess message"
      ansible.builtin.debug:
        msg: "SUCCESS! Your compute nodes are upgraded to {{ item }}. Enjoy!"
